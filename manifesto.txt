Manifest Projektu: Ting Tong SaaS
Misja: Stworzyć w pełni funkcjonalny, dopracowany prototyp aplikacji wideo, używając czystego HTML, CSS i JavaScript. Prototyp ten ma wiernie odzwierciedlać wygląd i wszystkie funkcjonalności z dostarczonych plików (tingtong.txt, pehape.txt) i służyć jako solidna podstawa dla przyszłej migracji do nowoczesnych technologii.

Wizja: Ting Tong ma być w przyszłości pełnoprawną platformą społecznościową. Stworzenie dopracowanego prototypu jest kluczowym krokiem do zweryfikowania koncepcji i zebrania feedbacku przed zainwestowaniem w pełną architekturę systemową.

Status Projektu (Stan na 2025-08-28)
BLOKER ROZWIĄZANY: Problem ze środowiskiem deweloperskim `npm` został zdiagnozowany i rozwiązany. Prace nad migracją do Next.js (Plan A) zostały wznowione i są w toku.

Obecny Cel: Realizacja Planu A: Pełna migracja aplikacji do Next.js, React, TypeScript, Tailwind CSS i Framer Motion.

Architektura Projektu
Plan A (Obecnie Realizowany)
Framework: Next.js (z App Router)
Stylizacja: Tailwind CSS, shadcn/ui
Animacje: Framer Motion

Plan B (Zakończony)
Frontend: Czysty HTML5, CSS3, JavaScript (ES6+).
Struktura: Aplikacja jednostronicowa (SPA) bez frameworka.
Silnik wideo: hls.js z fallbackiem do MP4.
Backend: Brak. Logika jest w pełni po stronie klienta, interakcje z API są symulowane.

Dziennik Zmian
Data | Etap Zakończony | Komentarz
--- | --- | ---
2025-08-28 | Planowanie | Zdefiniowano pierwotny manifest i plan migracji do Next.js.
2025-08-28 | Zmiana Strategii (Pivot) | Zdiagnozowano krytyczny błąd środowiska npm. Prace nad Next.js wstrzymane. Projekt oficjalnie wraca do Planu B: dopracowanie prototypu w HTML/CSS/JS.
2025-08-28 | Etap 1 (Plan B): Przygotowanie prototypu | Rozpoczęcie prac nad weryfikacją i dopracowaniem istniejącego kodu prototypu w celu osiągnięcia pełnej funkcjonalności.
2025-08-28 | Etap 1 (Plan B): Ukończenie prototypu | Status: Ukończono etap tworzenia prototypu UI w czystym HTML, CSS i JS. Wszelkie kluczowe elementy wizualne i interakcje z plików tingtong.txt i pehape.txt są wiernie odwzorowane. Prototyp jest stabilny i gotowy do dalszych prac.
2025-08-28 | Rozwiązywanie Blokera npm | Status: Ukończono. Problem został zidentyfikowany jako brak uprawnień do zapisu w katalogu roboczym. Zastosowano obejście polegające na pracy w katalogu tymczasowym.
2025-08-28 | Etap 2 (Plan A): Migracja do Next.js | Status: Ukończono. Prototyp został przepisany na architekturę Next.js. Stworzono strukturę komponentów, zaimplementowano UI, podstawową logikę, animacje Framer Motion oraz mock API.

Plan Wdrożenia (Etapami)
Etap 1: Inicjalizacja i Front-end (prototyp)
Status: Zakończony.

Etap 2: Migracja do Next.js i Frontend
Status: W toku.
Zadanie: Przepisanie prototypu na projekt Next.js z użyciem Reacta.
Cel: Odtworzyć wygląd i funkcjonalności prototypu w środowisku Next.js, wykorzystując komponenty i stan (state management).
Do zrobienia: Dokończyć implementację modali, zintegrować w pełni logikę z mock API, dodać obsługę błędów i stanów ładowania.

Etap 3: Backend (implementacja logiki)
Zadanie: Stworzenie i skonfigurowanie back-endu w NestJS, który zaimplementuje logikę z pliku pehape.txt.
Logika: Implementacja API w standardzie REST/GraphQL dla polubień, komentarzy, logowania, zarządzania profilem i powiadomień. Konfiguracja bazy danych PostgreSQL. Uruchomienie mikroserwisu do transkodowania wideo.
Output: Działające API, które obsłuży wszystkie funkcjonalności front-endu.

Etap 4: Integracja i rozszerzenia
Zadanie: Połączenie front-endu z gotowym back-endem. Zastąpienie mock data prawdziwymi danymi z API.
Optymalizacja: Włączenie adaptacyjnego bitrate w odtwarzaczu wideo, tak aby pobierał pliki HLS z serwera.
Wdrożenie: Skonfigurowanie wdrożenia front-endu i back-endu w kontenerach (Docker) i środowisku chmurowym (np. Kubernetes), aby zapewnić skalowalność.
